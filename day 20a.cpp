#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <sstream>
#include <algorithm>
#include <map>
#include <tuple>
#include <climits>

using namespace std;

vector<string> table = {"                               O         L       Z Z   P       X         P                                   \n",
                        "                               E         W       Z P   F       W         S                                   \n",
                        "  #############################.#########.#######.#.###.#######.#########.#################################  \n",
                        "  #...#.#.#.#.#.#...........#.#.......#.....#.#.#.....#.#.....#.#.....#.#...........#.....#.#.#.#.#.#...#.#  \n",
                        "  #.###.#.#.#.#.#####.#.###.#.#######.###.###.#.#.#.###.#.###.#.###.###.###.###########.###.#.#.#.#.#.###.#  \n",
                        "  #.#.....#...........#...#.....#...#.#.......#...#...#...#...#.#...#...........#...#.#...................#  \n",
                        "  #.###.#####.#.###.#.###.###.#####.#.#.#######.###########.#.#.#.#.#########.###.###.#.###.#.#.#.###.###.#  \n",
                        "  #.....#.....#.#.#.#...#.#...........#...#.#...#...#.#.....#.#...#...#...........#.#.#...#.#.#.#.#...#...#  \n",
                        "  #####.#######.#.#########.#.#.#.###.#.#.#.###.###.#.#.###.#.###.#.#.#.#.#.#####.#.#.#.#######.#.###.###.#  \n",
                        "  #...#.....#...#.#.#.......#.#.#...#.#.#.....#.....#...#...#.#.#.#.#.#.#.#.....#.#...#...#...#.#...#...#.#  \n",
                        "  #.###.#########.#.#.#####.#####.###.###.###.#.#######.#######.#####.#######.###.###.#.#####.###.#########  \n",
                        "  #...#.#...#.#.#.#.#.#.....#.......#...#.#...#.......#...#...............#...#.....#...........#.#...#.#.#  \n",
                        "  #.###.###.#.#.#.#.#####.#####.#.#.#######.#.###.#####.#######.#.###.###.###.#####.#.#.###########.###.#.#  \n",
                        "  #.........#.....#...#...#.....#.#.#...#.#.#.#...#...#.....#.#.#.#.#.#.#.#.....#.#...#.#.#.#.#...#.#.#.#.#  \n",
                        "  ###.#######.#######.#.###.#####.#####.#.###.#.#####.#.#####.#####.#.#.#.###.###.###.###.#.#.#.###.#.#.#.#  \n",
                        "  #.........#.#.#.#...#.#.#.#...........#.#.#.#...#.#.....#.#.......#...#.#.#.#...#.#.........#...#.#.#...#  \n",
                        "  #.#########.#.#.#.#####.#######.#.#.#.#.#.#.###.#.###.###.#.#.###.#.#####.#.#.###.###.#.#.###.#.#.#.#.###  \n",
                        "  #.....#.......#...#.........#...#.#.#.#.....#.....#.......#.#...#.#.#.........#.......#.#.#.#.#.#.#.....#  \n",
                        "  ###.#.###.#####.#######.###.#.###.#.#####.#####.#.###.#######.#####.#.###############.###.#.#.###.###.###  \n",
                        "  #.#.#.#...#.....#...#...#...#...#.#.#.#.#.#...#.#...#...#.#.....#.#.#.#.............#.#...#...#.....#...#  \n",
                        "  #.#.###.#####.#####.#######.#.#######.#.#.###.#####.#.###.#.#.###.#.#.#.#.#.#####.###########.#.#####.###  \n",
                        "  #.......#.#...#.#...#.#...........#.#.#.....#.......#...#.#.#.......#...#.#.#...#.#.#.#.#.........#.#...#  \n",
                        "  #.###.###.###.#.###.#.#########.###.#.#.#.###.###.###.###.#####.###.#####.###.#####.#.#.#####.###.#.#.#.#  \n",
                        "  #.#.....#.#...#.#.#...#.#.........#...#.#.#...#...#.......#.....#.#.#...........#.........#.#.#.#.#...#.#  \n",
                        "  #######.#.###.#.#.#.###.#######.###.#.###.###.###.###.###.#.#.###.###.#.###.#####.#########.#.#.###.#####  \n",
                        "  #...........#.#.#.....#.............#.#.#.#.....#.#...#.#.#.#.......#.#.#.....#.#.#...#.#...#.....#...#.#  \n",
                        "  #########.###.#.#.#######.#.#.#####.###.#.#####.#.#.###.#.###.#####.#.#####.###.#.###.#.#.#####.###.###.#  \n",
                        "  #.#.#.#.#.#...#.....#.#.#.#.#.#.........#...#...#.#.#.......#.#.....#...#...#...#.#...#.#.....#...#.....#  \n",
                        "  #.#.#.#.#.###.#.#.#.#.#.#######.#########.###.###########.#####.#####.#########.#.###.#.###.###.#####.#.#  \n",
                        "  #...#.#.....#...#.#.#...#.#    Y         H   N           T     S     W        #.#.#.....#.#.#...#.#.#.#.#  \n",
                        "  #.###.###.###.#.#####.###.#    T         V   P           Z     B     Z        #.#.###.#.#.#.###.#.#.#.###  \n",
                        "  #.#...#.#.....#...#.....#.#                                                   #.....#.#...........#...#.#  \n",
                        "  #.###.#.#.#.#########.#.#.#                                                   #.#.#####.#########.#.#.#.#  \n",
                        "TZ......#...#.....#...#.#...#                                                 PF..#.#...#.....#.......#....TF\n",
                        "  #.#.#####.#.#####.#.#####.#                                                   #.#.#.#.###.#.###.#.#####.#  \n",
                        "  #.#...#...#.....#.#.#.#...#                                                   #.#.#.#...#.#.#.#.#.#.....#  \n",
                        "  ###.#.#.###.#.#.###.#.###.#                                                   #.#.#.###.#.###.###########  \n",
                        "  #.#.#...#...#.#............XH                                                 #.#...#.....#.#.....#.....#  \n",
                        "  #.#####.#####.#.#.#.###.#.#                                                   ###.#########.###.#.#####.#  \n",
                        "  #...#.#.#.....#.#.#.#.#.#.#                                                   #...#.............#.#.....#  \n",
                        "  #.#.#.#.#########.###.#####                                                   ###.#.###.#.#####.#####.#.#  \n",
                        "NJ..#.#.#.#...#.#.#.....#...#                                                   #.#.#...#.#.#...........#..NP\n",
                        "  ###.#.###.#.#.#.#.#######.#                                                   #.#####.#####.###.###.#.###  \n",
                        "  #.....#.#.#.#...#.#.......#                                                   #.......#...#.#.....#.#...#  \n",
                        "  #####.#.#.#####.###.#.###.#                                                   #.#########.###############  \n",
                        "  #...#...............#.#.#..KX                                               PS....#.....#.#.#.#...#...#.#  \n",
                        "  #.#####################.###                                                   #########.#.#.#.#.#####.#.#  \n",
                        "  #.................#.......#                                                   #..........................YT\n",
                        "  #.###.#.#.###.###.#.###.###                                                   #.###.###.#.#.#.#.###.###.#  \n",
                        "KX....#.#.#.#...#.....#.....#                                                 IF....#.#...#.#.#.#...#.#...#  \n",
                        "  #.###.###.#####.#.###.#####                                                   #########.#################  \n",
                        "  #.#...#...#.#...#.#........XW                                                 #...#...#.#.#.#.#..........HV\n",
                        "  #.###.###.#.#####.#.#######                                                   #.#####.###.#.#.#.#####.#.#  \n",
                        "  #.#.#.#.#.#.#...#.#.#.#...#                                                 XG..#.#.#...#...#...#...#.#.#  \n",
                        "  ###.###.###.###.#####.#.#.#                                                   #.#.#.#.###.#.#.#.#.#####.#  \n",
                        "  #.#.#.#.#.#.#.#.........#.#                                                   #...#.......#.#.#.#...#.#.#  \n",
                        "  #.#.#.#.#.#.#.#######.###.#                                                   #.#####.#.#.#####.###.#.###  \n",
                        "SO....#.........#.#.....#...#                                                   #.......#.#.......#...#.#.#  \n",
                        "  #.###.###.#.#.#.###.###.###                                                   #####.#.#####.#######.#.#.#  \n",
                        "  #.....#...#.#.......#.#....XX                                               MU..#...#.....#.#...........#  \n",
                        "  #.#.###.#####.#####.#.#.###                                                   #.#####.#######.#######.###  \n",
                        "  #.#.#.#.#.#.....#.....#.#..YH                                                 #.#.#...#.#...........#...#  \n",
                        "  #####.###.###############.#                                                   #.#.#####.#.###.#.#.###.#.#  \n",
                        "  #...#...#...#.#.#...#...#.#                                                   #.#...#.#.#...#.#.#...#.#..TH\n",
                        "  #.#####.#.###.#.#.###.###.#                                                   #.#.###.#.#######.#########  \n",
                        "XH..#.#.#.....#.#...#...#.#.#                                                   #...................#.#...#  \n",
                        "  #.#.#.#.#.###.###.#.#.#.#.#                                                   #####################.###.#  \n",
                        "  #.......#...........#.....#                                                   #.....#.........#..........VD\n",
                        "  #########.###.###.#.#.#.###                                                   #.###.#.#.#.###.#.#.#####.#  \n",
                        "IF......#.#.#.#.#...#.#.#.#.#                                                 OE..#...#.#.#.#.....#...#...#  \n",
                        "  #.#####.#.#.#######.#.###.#                                                   #.#.###.###.###.###.#.#.###  \n",
                        "  #...#.#.#...#.#.#...#.#.#..LW                                                 #.#...#...#.#.....#.#.#.#..AA\n",
                        "  #.#.#.#.#####.#.#######.#.#                                                   #####.#.#.#####.#.###.#.#.#  \n",
                        "YH..#.#...#.......#...#...#..NJ                                                 #.......#.#...#.#.#...#...#  \n",
                        "  #.###.#.###.#.#.#.###.#.#.#                                                   #####.#####.#.#######.#####  \n",
                        "  #.....#.....#.#.......#...#                                                   #.#.....#.#.#.#.#...#.#...#  \n",
                        "  ###########################                                                   #.###.###.#.###.#.#####.#.#  \n",
                        "  #...............#.#.......#                                                   #.#.#.#.#.....#...#.....#..KI\n",
                        "  ###.#####.#.###.#.#.#.#.#.#                                                   #.#.###.#.#######.#####.#.#  \n",
                        "  #.....#.#.#.#.....#.#.#.#..SO                                               TF..#...#...#.#.......#...#.#  \n",
                        "  #.#####.###.###.#.###.#.#.#                                                   #.#.#.#.#.#.###.#.###.###.#  \n",
                        "WZ..........#.#.#.#.#.#.#.#.#                                                   #...#...#.......#.......#.#  \n",
                        "  #.###.#.#.###.###.#.#.###.#                                                   #.#.###.#.#.###.#.###.#####  \n",
                        "  #...#.#.#.#.............#.#                                                   #.#...#.#.#...#.#...#.....#  \n",
                        "  #.###.#####.#####.#.#.###.#      Q           T       K   V         Z     T    ###.#.#.#####.#.###.#.#.###  \n",
                        "  #.#.....#.#...#...#.#...#.#      B           H       I   D         P     G    #...#.#...#...#...#.#.#...#  \n",
                        "  #########.#.###.###.#####.#######.###########.#######.###.#########.#####.###########.###.#.#.#.#####.###  \n",
                        "  #...#.......#.#...#.#.#.#.#.#.........#.#.#...#...#...#...#.#.#.....#.....#...#...#.#.#...#.#.#...#.....#  \n",
                        "  ###.#.#.#####.#.#####.#.###.###.###.###.#.#.###.#.###.#.###.#.#.#######.#.#.###.###.#.#####.###.#.#.#.###  \n",
                        "  #.....#.#.......#...#.#.........#.....#.#.#.#...#...#.#.....#.........#.#...#...#...#.....#.#...#.#.#...#  \n",
                        "  #.#.#.###.#####.#.###.#.###.#.#####.#.#.#.#.###.###.#.#.#.#.#.#.#.#########.#.###.#.#########.#.#.###.###  \n",
                        "  #.#.#.#...#.#.........#.#...#.#.#...#.#.....#...#.#...#.#.#.#.#.#...#...#.#.......#.....#...#.#.#...#...#  \n",
                        "  #.#####.###.#.#####.#######.###.#.###.#.#######.###.###.#####.###.###.###.#.#.###.###.#.#.#.###.#.###.###  \n",
                        "  #.#...#.#.......#.........#.#.....#.#.#.......#.#.#.#.....#.#.#.......#.....#...#.#.#.#...#.#...#...#...#  \n",
                        "  #.###.#.#.###.###.#.#######.#######.#.#######.#.#.#.###.#.#.#.#####.###.#.###.###.#.###.###.#####.#.#.#.#  \n",
                        "  #.#.....#...#...#.#.#...#.#.#.#.........#.#...#...#.#...#...#.#.......#.#...#...#.....#...#.#.#.#.#.#.#.#  \n",
                        "  ###.#.#.#.#.###.###.###.#.###.#######.###.#.#.#.#.#####.#.#########.#.###.#########.###.###.#.#.#.#######  \n",
                        "  #...#.#.#.#.#...#...#.......#...#.#.....#...#.#.#.....#.#.#.....#...#.#...#.....#.#.#.....#.#...........#  \n",
                        "  ###.###.#####.#####.#####.###.###.###.#######.#.#.#######.###.#.###.#####.#.#####.#####.#.###.#.#####.#.#  \n",
                        "  #.....#.#...#.#.....#.....#.#.#...#.#.#...#...#.#.#.#...#...#.#.....#...#...........#...#.#.#.#.#.....#.#  \n",
                        "  #.###.#####.#.#####.#####.#.#.###.#.#.#.#####.#.###.###.###.#####.#.###.#.#.###.###########.###.#####.#.#  \n",
                        "  #.#.#.#.......#...#.#...............#...#.#...#...#.........#.....#.#.....#.#.#.#.........#.#.......#.#.#  \n",
                        "  ###.#######.#####.#######.#.###.###.#.#.#.###.#.#.#######.#.#.#.#.###.###.###.###.#########.###.#########  \n",
                        "  #.#...#...#.#.#.#...#.....#.#...#.#.#.#.#.....#.#.#.#.#...#.#.#.#.#.....#.......#.....#.#.....#...#...#.#  \n",
                        "  #.#.#####.###.#.#.#.#.#.#######.#.#.#.#####.###.###.#.#####.#.#######.#######.###.#.###.#.#########.###.#  \n",
                        "  #.....#...#.....#.#.#.#.#.......#.#...#.#...#.#...#.#...#.#.#...#.#.........#.#...#.#.............#.#...#  \n",
                        "  #.###.#.#.###.#####.#.#########.#.#####.#.###.#.###.#.###.#.###.#.#####.#.#####.#####.#.#.#.#.###.#.###.#  \n",
                        "  #.#.#.#.#.............#.................#.#...#.#.....#.......#.....#...#.#.....#.....#.#.#.#.#.#.......#  \n",
                        "  ###.#.#####.###.#.#####.#.###.#.#.###.#.#.#.#.#.###.#####.#####.#.#.###.###.#######.###########.#.#####.#  \n",
                        "  #.............#.#.#.#...#.#...#.#.#...#.#.#.#.#...#...#.......#.#.#.#...#.....................#.#.....#.#  \n",
                        "  #####.#.###.#.#.###.###.###.#.###.#.#####.#.#.#.###.#######.#######.#.###.#.#.#.#.#.###.#.#####.###.###.#  \n",
                        "  #.....#...#.#.#.#.......#...#.#...#.#.......#.#.........#...#.......#.....#.#.#.#.#...#.#.......#.....#.#  \n",
                        "  ###################################.#########.#####.#####.#####.###########.#############################  \n",
                        "                                     X         S     T     Q     M           X                               \n",
                        "                                     G         B     G     B     U           X                               "
    };


map<string, pair<int, int>> mapOfStr;
pair<pair<int, int>, int> initialPositionAndDirection;
pair<int, int> finalPosition;

map<pair<int, int>, int> directionByPosition;
map<pair<int, int>, pair<int,int>> pairOfPositions;

int keysCount = 0;

const char positionToChar(pair<int, int> a){
    return table[a.first][a.second];
}

vector<pair<int, int>> v;

pair<int, int> originalPosition;

pair<int, int> newPositionByDirection(pair<int, int> oldPosition, int direction){
    if(direction == 0){
        return {oldPosition.first, oldPosition.second + 1};
    }
    if(direction == 1){
        return {oldPosition.first + 1, oldPosition.second};
    }
    if(direction == 2){
        return {oldPosition.first, oldPosition.second - 1};
    }
    // if(direction == 3)
    return {oldPosition.first - 1, oldPosition.second};

}

vector<int> possibleDirection(int i){
    vector<int> temp;
    for(int j = 0; j < 4; j++){
        if(i != j){
            temp.push_back(j);
        }
    }
    return temp;
};



tuple<bool, string, int> isPort(pair<int, int> position){
    if(positionToChar(position) != '.')
        return {false, "", 0};
    for(int i = 0; i < 4; i++){
        pair<int, int> position1 = newPositionByDirection(position, i);
        pair<int, int> position2 = newPositionByDirection(position1, i);
        if(isupper(positionToChar(position1)) and isupper(positionToChar(position2))){
            string s;
            s = positionToChar(position1);
            s += positionToChar(position2);
            if(i == 2 || i == 3){
                swap(s[0], s[1]);
            }
            return {true, s, (i+2)%4};
        }
    }
    return {false, "", 0};
}

vector<pair<pair<int, int>, int>> possiblePlacesByPosition(pair<int, int> position, int actualDirection){
    vector<int> possibleDirection_ = possibleDirection(actualDirection);
    vector<pair<pair<int, int>, int>> T;
    for(int&i : possibleDirection_){
        pair<int, int> newPosition = newPositionByDirection(position, actualDirection);
        if(positionToChar(newPosition)=='.'){
            tuple<bool, string, int> port = isPort(newPosition);
            if(get<0>(port) and get<1>(port) != "ZZ"){
                pair<int, int> P = pairOfPositions[newPosition];
                T.push_back({P, directionByPosition[P]});
            }else{
                T.push_back({newPosition, i});
            }
        }
    }
    return T;
}
//backtracking
int response = INT_MAX;
void backtracking(pair<pair<int, int>, int> P, int number){
    tuple<bool, string, int> port = isPort(P.first);
    if(get<0>(port) and get<1>(port) != "AA"){
        number++;
    }
    if(get<0>(port) and get<1>(port) == "ZZ"){
        if(response > number){
            response = number;
        }
        return;
    }
    vector<pair<pair<int, int>, int>> v1 = possiblePlacesByPosition(P.first, P.second);
    table[P.first.first][P.first.second] = ',';
    for(pair<pair<int, int>, int> element: v1){
        backtracking(element, number + 1);
    }
    table[P.first.first][P.first.second] = '.';
}

bool alreadyPorted = true;

void backtracking2(pair<int, int> P, int number){
    tuple<bool, string, int> port = isPort(P);
    if(get<0>(port) and get<1>(port) == "ZZ"){
        if(response > number){
            response = number;
        }
        return;
    }
    if(get<0>(port) and not alreadyPorted){
        alreadyPorted = true;
        table[P.first][P.second] = ',';
        backtracking2(pairOfPositions[P], number+1);
        table[P.first][P.second] = '.';
    }
    else{
        alreadyPorted = false;
        table[P.first][P.second] = ',';
        for(int i = 0; i<4 ;i++){
            pair<int, int> newPosition = newPositionByDirection(P, i);
            if(positionToChar(newPosition) == '.')
                backtracking2(newPosition, number + 1);
        }
        table[P.first][P.second] = '.';
    }
    //vector<pair<pair<int, int>, int>> v1 = possiblePlacesByPosition(P.first, P.second);

}


int main(){
    /*table = {"         A           \n",
             "         A           \n",
             "  #######.#########  \n",
             "  #######.........#  \n",
             "  #######.#######.#  \n",
             "  #######.#######.#  \n",
             "  #######.#######.#  \n",
             "  #####  B    ###.#  \n",
             "BC...##  C    ###.#  \n",
             "  ##.##       ###.#  \n",
             "  ##...DE  F  ###.#  \n",
             "  #####    G  ###.#  \n",
             "  #########.#####.#  \n",
             "DE..#######...###.#  \n",
             "  #.#########.###.#  \n",
             "FG..#########.....#  \n",
             "  ###########.#####  \n",
             "             Z       \n",
             "             Z       "};*/
    // response < 477
    for(int i=0; i<table.size(); i++){
        for(int j=0; j<table[0].size(); j++){
            tuple<bool, string, int> port = isPort({i, j});
            if(get<0>(port)){
                string str = get<1>(port);
                //string r_str = get<1>(port);
                //swap(r_str[0], r_str[1]);
                directionByPosition[{i,j}] = get<2>(port);

                if(mapOfStr.find(str) == mapOfStr.end()){ // key not found
                    mapOfStr[str] = {i,j};
                }else{
                    pairOfPositions[{i,j}]=mapOfStr[str];
                    pairOfPositions[mapOfStr[str]] = {i,j};
                    cout<<"pair found " << str << endl;
                }
            }
        }
    }



    //backtracking({mapOfStr["AA"], directionByPosition[mapOfStr["AA"]]}, 0);
    backtracking2(mapOfStr["AA"],0);
    cout<<response<<endl;
    return 0;
}
